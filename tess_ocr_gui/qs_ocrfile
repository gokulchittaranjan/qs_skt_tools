#!/usr/bin/python

import sys
import codecs
import multiprocessing
from subprocess import Popen, check_output
import os
import glob

if sys.version_info[0] < 3:
    from Tkinter import *
    import ttk
    import tkMessageBox as messagebox
    import tkFileDialog as filedialog
else:
    from tkinter import *
    from tkinter import ttk
    from tkinter import messagebox
    from tkinter import filedialog


TEMP_FILE_PREFIX = "QS_TEMP_"


def exec_command(cmd):
    print(cmd)
    if isinstance(cmd, list):
        Popen(cmd).wait()
    elif isinstance(cmd, str):
        Popen(cmd, shell=True).wait()


def get_command_output(cmd):
    return check_output(cmd)


def process_pdf_page(arg):
        img_args, f = arg
        density, quality = img_args
        to_png(f, density, quality)


def to_png(f, density, quality):
        output_filename = f + ".png"
        cmd = "convert -density {} {} -quality {} {}".format(density, f, quality, output_filename)
        exec_command(cmd)
        return output_filename


def ocr(f, language):
        outputfilename = f + ".ocr.txt"
        cmd = ["tesseract",
               f,
               outputfilename,
               "-l", str(language),
               "--oem", "1"]
        exec_command(cmd)
        return outputfilename


def fileDialog(self):

    self.filename = filedialog.askopenfilename(initialdir=os.getcwd(),
                                               title="Select A File to OCR",
                                               filetype=(("jpeg files", "*.jpg"),
                                                         ("png files", "*.png"),
                                                         ("pdf files", "*.pdf")))
    self.label = ttk.Label(self.labelFrame, text="")
    self.label.grid(column=1, row=2)
    self.label.configure(text=self.filename)


class Root(Tk):
    def __init__(self):
        Tk.__init__(self)
        self.title("QuaintScienceTools::OCR files using Tesseract")
        self.minsize(200, 200)
        # self.wm_iconbitmap('icon.ico')
        self.labelFrame = ttk.LabelFrame(self, text="Open File to OCR")
        self.labelFrame.grid(column=0, row=1, padx=20, pady=20)

        self.select_file_button()
        self.language_dropdown()
        self.image_settings_inputs()
        self.ocr_button()

    def select_file_button(self):
        self.select_file_button = ttk.Button(self.labelFrame,
                                             text="Browse A File to OCR",
                                             command=self.select_file_dialog)
        self.select_file_button.grid(column=1, row=1)

    def ocr_button(self):
        self.ocr_button = ttk.Button(self.labelFrame,
                                     text="OCR the document!",
                                     command=self.ocr_the_doc)
        self.ocr_button.grid(column=1, row=4)
        self.pb_value = IntVar(self)
        self.pb_value.set("")
        self.progress = ttk.Progressbar(self.labelFrame, orient=HORIZONTAL,
                                        length=100, mode='determinate', value=0, maximum=100)
        self.progress.grid(column=0, row=8)

    def image_settings_inputs(self):
        labelFrame = ttk.Label(self.labelFrame, text="Image Density (JPG/PDF)")
        labelFrame.grid(column=0, row=6)
        self.image_density = ttk.Entry(self.labelFrame)
        self.image_density.grid(column=1, row=6)
        labelFrame = ttk.Label(self.labelFrame, text="Image Quality (JPG/PDF)")
        labelFrame.grid(column=0, row=7)
        self.image_quality = ttk.Entry(self.labelFrame)
        self.image_quality.grid(column=1, row=7)
        self.image_density.insert(0, "300")
        self.image_quality.insert(0, "100")

    def language_dropdown(self):
        # Create a Tkinter variable
        self.tkvar = StringVar(self)
        tkvar = self.tkvar

        # Dictionary with options
        langs = get_command_output(["tesseract", "--list-langs"])
        langs = filter(None, str(langs).split("\n")[1:])
        choices = set(langs)
        tkvar.set(langs[0])  # set the default option
        self.language = 'tel'

        popupMenu = OptionMenu(self.labelFrame, tkvar, *choices)
        popupMenu.grid(row=3, column=1)

        # on change dropdown value
        def change_dropdown(*args):
            self.language = str(tkvar.get())

    def select_file_dialog(self):
        self.filename = filedialog.askopenfilename(initialdir=os.getcwd(),
                                                   title="Select A File to OCR",
                                                   filetypes=(("pdf files", "*.pdf"),
                                                              ("jpeg files", "*.jpg"),
                                                              ("png files", "*.png")))
        self.label = ttk.Label(self.labelFrame, text="")
        self.label.grid(column=1, row=2)
        self.label.configure(text=self.filename)

    def ocr_the_doc(self):
        self.switch(self.ocr_button)
        filename = str(self.filename)
        output_filename = filename + ".ocr.txt"
        if filename.endswith("pdf"):
            exec_command("rm {}*".format(TEMP_FILE_PREFIX))
            output_pattern = "{}%04d.pdf".format(TEMP_FILE_PREFIX)
            exec_command("pdftk {} burst output {}".format(filename, output_pattern))
            p = multiprocessing.Pool(5)

            tmp_files = glob.glob("./{}*.pdf".format(TEMP_FILE_PREFIX))

            args = list(zip([[int(self.image_density.get()),
                             int(self.image_quality.get())]] * len(tmp_files), tmp_files))
            p.map(process_pdf_page, args)
            png_files = glob.glob("./{}*.png".format(TEMP_FILE_PREFIX))

            for ii, f in enumerate(png_files):
                ocr(f, self.language)
                self.progress["value"] = int((ii + 1) * 100 / (len(png_files) + 1e-9))
                self.update_idletasks()
            self.progress["value"] = 100
            self.update_idletasks()
            all_data = []
            for f in sorted(glob.glob("./{}*.ocr.txt*".format(TEMP_FILE_PREFIX))):
                with codecs.open(f, encoding='utf-8') as d:
                    all_data.append((f, d.read()))
            # Popen("rm QS_TEMP*", shell=True).wait()
            with codecs.open(output_filename, 'w', encoding='utf-8') as f:
                for tmp_file, item in all_data:
                    page_number = tmp_file.replace("./{}".format(TEMP_FILE_PREFIX), "").replace(".pdf", "")
                    page_number = page_number.split(".")[0]
                    f.write("========= PAGE {} =========\n".format(page_number))
                    f.write(item)
        elif filename.endswith("jpg") or filename.endswith("jpeg"):
            fname = self.to_png(f)
            output_filename = self.ocr(fname)
        else:
            output_filename = self.ocr(filename)
        messagebox.showinfo("QuaintScienceTools",
                            "Done OCRing file. It is stored at {}".format(output_filename))
        self.switch(self.ocr_button)

    def switch(self, button):
        if str(button["state"]) == NORMAL:
            button["state"] = DISABLED
        else:
            button["state"] = NORMAL
        print(button["state"])


root = Root()
root.mainloop()
